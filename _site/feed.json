[
  
  {
    "docs_landing" : "true",
    "url"     : "/docs/",
    "slug"     : "",
    "content": "<ul>\n  <li>Get started securing your repos by <strong><a href=\"https://snyk.io/docs/github/\" title=\"GitHub Integration\">integrating Snyk with GitHub.</a></strong></li>\n  <li>Check our <strong><a href=\"https://snyk.io/docs/using-snyk/\" title=\"Snyk CLI\">detailed documentation for using Snyk CLI.</a></strong></li>\n</ul>\n\n<p>Need help with anything you can’t find here? <a href=\"&#109;&#097;&#105;&#108;&#116;&#111;:&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#064;&#115;&#110;&#121;&#107;&#046;&#105;&#111;\">Drop us a line</a> and we’ll get right back to you.</p>\n\n<h2 id=\"cli-commands-overview\">CLI commands overview</h2>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>snyk [options] [command] [package]\n</code></pre>\n</div>\n\n<p>The package argument is optional. If no package is given, Snyk will run the command against the current working directory allowing you test you non-public applications.</p>\n\n<h3 id=\"commands\">Commands</h3>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>auth [api-token].....sign into snyk.\ntest ............... test for any known vulnerabilities.\nwizard ............. configure your policy file to update, auto patch and ignore vulnerabilities.\nprotect ............ protect your code from vulnerabilities and optionally suppress specific vulnerabilities.\nmonitor ............ record the state of dependencies and any vulnerabilities on snyk.io.\npolicy ............. display the Snyk policy for a package.\n</code></pre>\n</div>\n\n<h3 id=\"options\">Options</h3>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>--dev .............. include devDependencies (defaults to production only)\n--ignore-policy .... ignores and resets the state of your policy file\n--trust-policies ... applies and uses ignore rules from your dependencies's Snyk policies,\n                     otherwise ignore policies are only shown as a suggestion.\n--dry-run .......... don't apply updates or patches during protect.\n-q, --quiet ........ silence all output.\n-h, --help ......... this help information.\n-v, --version ...... the CLI version.\n</code></pre>\n</div>\n\n<h3 id=\"examples\">Examples</h3>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>snyk test\nsnyk test ionic@1.6.5\n</code></pre>\n</div>\n\n<p class=\"layout-aside backdrop-glowing u--push-bottom-l u--push-top-l\">\n  Use <code>snyk test</code> in your test scripts. If a vulnerability is found, the process will exit with a non-zero exit code.\n</p>\n"
  },
  
  {
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/",
    "slug"     : "",
    "content": "<p>Follow this tutorial to get up and running with Snyk. Using our demo app as an example, see how we help you address vulnerabilities with our CLI tool.</p>\n"
  },
  
  {
    "title" : "Set up",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/set-up",
    "slug"     : "set-up",
    "content": "<p>First off, you’ll need a project to test. If you don’t have one handy, you can use our demo application, <a href=\"https://github.com/Snyk/snyk-demo-app\">snyk-demo-app</a>. Run these lines to clone it and install its dependencies:</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>git clone https://github.com/Snyk/snyk-demo-app.git\ncd snyk-demo-app\nnpm install\n</code></pre>\n</div>\n\n<p>Now that you have a project to test, you need to install Snyk from npm, change directory to your project’s folder and run Snyk’s wizard. We’ll install Snyk as a global tool for now; later we’ll touch on using it as a local dependency of your automated tests. Run the following in your project’s folder:</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>npm install –g snyk\nsnyk wizard\n</code></pre>\n</div>\n\n<p>The wizard walks you through finding and fixing the issues found through upgrades and patches, and creates a Snyk policy (a .snyk file) with your decisions. The wizard leverages four other Snyk commands –<code class=\"highlighter-rouge\">auth</code>, <code class=\"highlighter-rouge\">test</code>, <code class=\"highlighter-rouge\">protect</code> and <code class=\"highlighter-rouge\">monitor</code> – which we’ll explain as we advance.</p>\n"
  },
  
  {
    "title" : "Authentication",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/authentication",
    "slug"     : "authentication",
    "content": "<p>If this is the first time you use Snyk, the wizard will first ask you to register using your GitHub account. <em>Note that Snyk does not require access to your repositories</em>. It only requests access to your email, using GitHub as an authentication system.</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>snyk wizard\n\nNow redirecting you to our github auth page, go ahead and log in,\nand once the auth is complete, return to this prompt and you’ll\nbe ready to start using snyk.\n\nIf you can’t wait use this url:\nhttps://snyk.io/login?token=9b4ae29b-d430-4d79-b9a3-dd522e77f8b9\n\nWaiting...\n</code></pre>\n</div>\n\n<p>Once authenticated, the wizard will get an API token to store locally and get on with the testing. The same authentication process can be done by running <code class=\"highlighter-rouge\">snyk auth</code>, or running <code class=\"highlighter-rouge\">snyk auth &lt;api-token&gt;</code> (especially useful when integrating Snyk into your build/continuous integration (CI) system).</p>\n"
  },
  
  {
    "title" : "Testing",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/testing",
    "slug"     : "testing",
    "content": "<p>To find vulnerabilities, the wizard will traverse the local project and collect the packages it uses (note this means you should only run it after you run <code class=\"highlighter-rouge\">npm install</code>). It then posts this list to the Snyk service, where they’re matched against Snyk’s <a href=\"https://github.com/Snyk/vulndb\">open source vulnerability database</a>.</p>\n\n<p>This test also can be performed by running <code class=\"highlighter-rouge\">snyk test</code>, which is useful when integrating Snyk into your CI (more on that later).</p>\n\n<p>Once the vulnerabilities are determined, the wizard will go through them and guide you through the remediation steps needed. It remembers the answers you give, and when the questions end it makes the changes you asked for.</p>\n\n<h3 id=\"lets-go-through-the-findings-on-the-snyk-demo-app\">Let’s go through the findings on the snyk demo app.</h3>\n\n<p>You can see the wizard tells you how many vulnerabilities were found in how many dependencies.</p>\n\n<p>The first vulnerability is a <strong>high severity issue in a direct dependency called bassmaster</strong>. There’s only so much detail we can share in a terminal, but you can use the <a href=\"https://snyk.io/vuln/npm:bassmaster:20140927\">info link</a> to get more information about the vulnerability itself.</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>? High severity vulnerability found in bassmaster@1.5.1, introduced via bassmaster@1.5.1\n- info: https://snyk.io/vuln/npm:bassmaster:20140927\n  Remediation options (Use arrow keys)\n❯ Upgrade to bassmaster@1.5.2\n  Patch (modifies files locally, updates policy for `snyk protect` runs)\n  Set to ignore for 30 days (updates policy)\n  Skip\n</code></pre>\n</div>\n<p><em>Upgrade bassmaster prompt</em></p>\n\n<p>In many cases, disclosed vulnerabilities are fixed shortly after they’re discovered, and all you need to do is upgrade to the relevant version. When that’s possible, upgrade is the cleanest and best way to address such a security bug. In the case of bassmaster, all we need to apply is a ‘fix’ upgrade.</p>\n\n<p>Next, we see that a direct dependency, <strong>falcor-router-demo@1.0.3</strong>, introduced <strong>multiple vulnerabilities</strong>. The vulnerabilities in this case aren’t in the <code class=\"highlighter-rouge\">falcor-router-demo</code> code, but rather in the dependencies it pulls in. This is a very common scenario, as most of the packages used by your application are actually pulled in indirectly.</p>\n\n<p>Unfortunately, you can’t upgrade a deep dependency, both for technical reasons and for fear of breaking functionality. Your remediation step therefore is to upgrade the direct dependency, triggering the deep dependency upgrade. In this case, upgrading <code class=\"highlighter-rouge\">falcor-router-demo</code> to version 1.0.5 (a ‘fix’ upgrade) will trigger the <code class=\"highlighter-rouge\">qs</code> and <code class=\"highlighter-rouge\">semver</code> upgrades you need to fix the vulnerabilities.</p>\n\n<p>The wizard reports <strong>multiple vulnerabilities in the hapi@10.5.0 dependency</strong>. This typically happens when you are several versions behind the latest version, and in the meantime multiple vulnerabilities have been found and fixed. In this case, clicking <a href=\"https://snyk.io/test/npm/hapi/10.5.0\">the info link</a> will show you details for the vulnerabilities that affect hapi.</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>? 7 vulnerabilities introduced via hapi@10.5.0\n- info: https://snyk.io/package/npm/hapi/10.5.0\n  Remediation options (Use arrow keys)\n❯ Upgrade to hapi@11.1.4 (potentially breaking change, triggers upgrade to moment@2.11.2)\n  Review vulnerabilities separately\n  Set to ignore for 30 days (updates policy)\n  Skip\n</code></pre>\n</div>\n<p><em>Upgrade hapi prompt</em></p>\n\n<p>The wizard’s default suggestion is to upgrade to the latest version, addressing all issues, but you can also choose to review and act on each vulnerability separately.</p>\n"
  },
  
  {
    "title" : "Patch and Protect",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/patch-and-protect",
    "slug"     : "patch-and-protect",
    "content": "<p>Patch and Protect</p>\n\n<p>The next issue the wizard reports on our demo app is different.</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>? High severity vulnerability found in handlebars@3.0.3, introduced via snyk-demo-child@0.0.1\n- from: snyk-demo-child@0.0.1 &gt; handlebars@3.0.3\n- info: https://snyk.io/vuln/npm:handlebars:20151207\n  Remediation options (Use arrow keys)\n❯ Patch (modifies files locally, updates policy for `snyk protect` runs)\n  Set to ignore for 30 days (updates policy)\n  Skip\n</code></pre>\n</div>\n<p><em>Patch handlebars prompt</em></p>\n\n<p>Snyk found a vulnerability in handlebars, pulled in via the direct dependency <code class=\"highlighter-rouge\">snyk-demo-child</code>. Although the vulnerability <a href=\"https://snyk.io/vuln/npm:handlebars:20151207\">was fixed</a> in handlebars 4.0.0, <code class=\"highlighter-rouge\">snyk-demo-child</code> has not upgraded to that version – so you can’t upgrade the vulnerability away.</p>\n\n<p>This scenario is especially common in recently disclosed vulnerabilities, as it takes a while for the dependency chain to catch up. In addition, sometimes an upgrade is available, but it’s a major upgrade with breaking changes, and you can’t handle it right now. In cases when you have no upgrade option, instead of simply remaining vulnerable, Snyk suggests you patch the vulnerability with a Snyk patch.</p>\n\n<p>After we patch Handlebars, the wizard prompts about two instances of uglify-js vulnerabilities, suggesting you patch them all.</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>? 2 vulnerabilities introduced via uglify-js\n- info: https://snyk.io/package/npm/uglify-js/2.3.6\n  Remediation options (Use arrow keys)\n  Upgrade (no sufficient upgrade available, we'll notify you when there is one)\n❯ Patch the 2 vulnerabilities\n  Review the vulnerabilities separately\n  Set to ignore for 30 days (updates policy)\n  Skip\n</code></pre>\n</div>\n<p><em>Patch uglify prompt</em></p>\n\n<p>As projects expand, it’s common to find the same package repeated in the dependency tree, and it’s not that rare for one package to have multiple vulnerabilities. When the wizard sees multiple instances of a vulnerable package, it offers a shortcut to patch them all to save time. You can still choose to review and patch each issue separately, and if an instance was sufficiently upgraded by previously chosen upgrades it won’t be touched.</p>\n\n<p>Note the wizard only patches the <em>locally installed</em> files. This means you need to reapply this patch every time dependencies are reinstalled, which you can do by running <code class=\"highlighter-rouge\">snyk protect</code>. The wizard stores the patches you chose in the Snyk policy (<em>.snyk</em>), and <code class=\"highlighter-rouge\">snyk protect</code> will apply those patches, and those patches alone – it never unilaterally applies a patch. Each time you reinstall your dependencies, you should run <code class=\"highlighter-rouge\">snyk protect</code> to close the vulnerabilities. The wizard can do this for you, as we’ll see later on.</p>\n"
  },
  
  {
    "title" : "Ignore",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/ignore",
    "slug"     : "ignore",
    "content": "<p>This issue the wizard shows is not as easily solved.</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>? Medium severity vulnerability found in validator@3.1.0, introduced via azure-mgmt-storage@0.9.16\n- from: azure-mgmt-storage@0.9.16 &gt; azure-common@0.9.11 &gt; validator@3.1.0\n- info: https://snyk.io/vuln/npm:validator:20130705\n  Remediation options (Use arrow keys)\n  Upgrade (no sufficient upgrade available, we'll notify you when there is one)\n  Patch (modifies files locally, updates policy for `snyk protect` runs)\n❯ Set to ignore for 30 days (updates policy)\n  Skip\n</code></pre>\n</div>\n<p><em>Validator vulnerability</em></p>\n\n<p>A vulnerability is found in a deep <code class=\"highlighter-rouge\">validator</code> dependency, which has neither an upgrade nor a patch available. There are many combinations of vulnerability and module versions, and not all of them can be patched. Snyk’s security team is constantly adding more patches to the <a href=\"https://github.com/Snyk/vulndb\">open source VulnDB</a> and would <a href=\"https://github.com/Snyk/vulndb/blob/master/CONTRIBUTING.md\">welcome pull requests</a>, but some issues still have no patch.</p>\n\n<p>There’s no easy fix for these issues. You’ll need to better understand the risk this issue presents to your system, and weigh this risk against the effort of fixing the issue – for instance, by removing the dependency. While you consider your actions, you can ‘snooze’ the issue with Snyk, telling it to ignore the issue for 30 days. Snyk will prompt you to provide a reason for ignoring, to help you remember why you did it later on.</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>? Medium severity vulnerability found in validator@3.1.0, introduced via azure-mgmt-storage@0.9.16\n- from: azure-mgmt-storage@0.9.16 &gt; azure-common@0.9.11 &gt; validator@3.1.0\n- info: https://snyk.io/vuln/npm:validator:20130705\n  Remediation options Ignore\n? [audit] Reason for ignoring vulnerability? (None given) Not deployed to production\n</code></pre>\n</div>\n<p><em>Validator ignore reason</em></p>\n\n<p>If you assess the vulnerability and decide it’s not an issue (for instance, because a component is not really deployed to production), you can manually edit the Snyk policy (<em>.snyk</em>) file to use a far-future expiry date for this instance. Note that Snyk does not test devDependencies by default, avoiding most such red herrings.</p>\n\n<p>In addition to any action you take, Snyk will let you know when a patch or upgrade become available for this scenario, so you can apply a better solution.</p>\n"
  },
  
  {
    "title" : "Applying your choices",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/applying-your-choices",
    "slug"     : "applying-your-choices",
    "content": "<p>That’s it, we’ve tackled all the issues – hurray!</p>\n\n<p>Before the wizard applies the requested changes, it suggests adding two steps to your Package.json workflow to keep you vulnerability free.</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>? Add `snyk test` to package.json file to fail test on newly disclosed vulnerabilities? Yes\n? Add `snyk protect` as a package.json installation hook to apply chosen patches on install? (Y/n)\n</code></pre>\n</div>\n<p><em>Package.json steps</em></p>\n\n<p>First, the wizard suggests adding Snyk’s test to your regular <code class=\"highlighter-rouge\">npm test</code> action. If a vulnerable package was added, the test would fail, keeping you safe. The wizard will also add <code class=\"highlighter-rouge\">snyk</code> as devDependency, as you’ll need it in your test or CI environment. You can use the same logic to run this test in any favourite CI/test platform.</p>\n\n<p>If you’ve chosen to patch an issue, the wizard will also suggest adding <code class=\"highlighter-rouge\">snyk protect</code> to the <code class=\"highlighter-rouge\">postinstall</code> step. A post installation hook runs every time you install this package’s dependencies, ensuring those dependencies are always properly patched. Note that such a hook requires adding <code class=\"highlighter-rouge\">snyk</code> as a dependency (not devDependency).</p>\n\n<div class=\"language-console highlighter-rouge\"><pre class=\"highlight\"><code>Applying patches...\nRunning `npm update`...\nSaving .snyk policy file...\nUpdating package.json...\nRemembering current dependencies for future notifications...\n\nYour policy file has been created with the actions you've selected, add it to your source control (`git add .snyk`).\nTo review your policy, run `snyk policy`.\n\nYou can see a snapshot of your dependencies here:\nhttps://snyk.io/monitor/441b89f0-6e5a-40a0-9e4e-d824e51998a2\n\nWe'll notify you when relevant new vulnerabilities are disclosed.\n</code></pre>\n</div>\n<p><em>Snyk wizard applied changes.</em></p>\n\n<p>With all the questions answered, the wizard proceeds to apply the changes. It modifies the Package.json file with any upgrade requests or hooks, runs <code class=\"highlighter-rouge\">npm update</code> to apply the changes, and stores the Snyk policy in the <em>.snyk</em> file (you can pretty-print it by running <code class=\"highlighter-rouge\">snyk policy</code>). Make sure to add this <em>.snyk</em> file to your source control for patch and ignore instructions to apply.</p>\n\n<p>Lastly, the wizard takes a snapshot of your dependencies, so it can monitor them over time.</p>\n"
  },
  
  {
    "title" : "Monitor",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/monitor",
    "slug"     : "monitor",
    "content": "<p>Now that you’re free of known vulnerabilities, there are two ways that can change. The first is adding vulnerable packages to your code, which we handle by adding <code class=\"highlighter-rouge\">snyk test</code> to your test/CI system. The second is through newly disclosed vulnerabilities. These are new disclosures of vulnerabilities in old code – the code you’re running in production!</p>\n\n<p>This is addressed by Snyk’s last step – monitor. The snapshot the wizard takes is saved on Snyk’s servers, remembering the dependencies used on this application. If a newly disclosed vulnerability affects your application, you’ll get an email alerting you to it. You can then run the wizard again to upgrade or patch as needed, and deploy the secure code.</p>\n\n<p>To keep Snyk’s understanding of your application up to date, you can run <code class=\"highlighter-rouge\">snyk monitor</code> at the end of your deployment process. Doing so will take a fresh snapshot of your application, just like the wizard does, and will ensure Snyk’s alerts apply to your most recent code.</p>\n\n<p>You now have an overview of Snyk test, protect, and monitor, and you’ve used the wizard that walks you through fixing your vulnerabilities. If you’d like to know more, take a look at our detailed documentation, and our FAQ.</p>\n"
  },
  
  {
    "title" : "What’s a Snyk organisation?",
    "docs_orgs" : "true",
    "url"     : "/docs/orgs/what-s-a-snyk-organisation",
    "slug"     : "what-s-a-snyk-organisation",
    "content": "<p>An organisation groups projects, and can have team members who can access these projects.</p>\n\n<p>When you sign up to Snyk, you’ll see you have a default organisation, named like your GitHub username. Any projects you add via the CLI or via GitHub integration will appear in this organisation by default.</p>\n\n<p>You can create an organisation, or join one via invitation. If you have more than one organisation, you can switch between organisations via the web UI or in the CLI.</p>\n\n<p>Notifications about newly disclosed vulnerabilities are per organisation; you can turn them on and off per organisation.</p>\n\n<p>Snyk pricing works per organisation, so e.g. you can have your own default organisation on a free plan, while being a member of an organisation your company pays for.</p>\n"
  },
  
  {
    "title" : "Creating a new organisation",
    "docs_orgs" : "true",
    "url"     : "/docs/orgs/creating-a-new-organisation",
    "slug"     : "creating-a-new-organisation",
    "content": "<p>You can have an unlimited number of organisations on Snyk. Each organisation can be on a different pricing plan.</p>\n\n<p>To create a new organisation, choose the ‘Create’ link in the drop-down in the top navigation. You can then name the organisation and choose a plan.</p>\n\n<p><img src=\"https://res.cloudinary.com/snyk/image/upload/f_auto,q_auto,c_scale,w_682/v1466629386/docs-create_a_new_organisation.png\" alt=\"Create organisation\" /></p>\n"
  },
  
  {
    "title" : "Switching between organisations",
    "docs_orgs" : "true",
    "url"     : "/docs/orgs/switching-between-organisations",
    "slug"     : "switching-between-organisations",
    "content": "<h4 id=\"on-snykio\">On snyk.io</h4>\n\n<ul>\n  <li>Choose the organisation you want from the drop-down menu in the top navigation.</li>\n  <li>If you add projects on snyk.io via GitHub integration, they will be added to the currently chosen organisation.</li>\n</ul>\n\n<h4 id=\"in-the-snyk-cli\">In the Snyk CLI</h4>\n\n<ul>\n  <li>If you have only your default organisation, any projects you add or update by running <code class=\"highlighter-rouge\">snyk wizard</code> or <code class=\"highlighter-rouge\">snyk monitor</code> will be automatically associated with your default organisation.</li>\n  <li>If you have more than one organisation, you can configure which one projects should be associated with by running <code class=\"highlighter-rouge\">snyk config set org=orgname</code>. Note: <code class=\"highlighter-rouge\">orgname</code> should match the name as displayed in the URL.</li>\n  <li>If you would like to override this global configuration for individual runs of <code class=\"highlighter-rouge\">snyk wizard</code> or <code class=\"highlighter-rouge\">snyk monitor</code>, run <code class=\"highlighter-rouge\">snyk monitor --org=orgname</code> or <code class=\"highlighter-rouge\">snyk wizard --org=orgname</code>.</li>\n</ul>\n"
  },
  
  {
    "title" : "Managing organisations",
    "docs_orgs" : "true",
    "url"     : "/docs/orgs/managing-organisations",
    "slug"     : "managing-organisations",
    "content": "<p>In the ‘Manage organisation’ section, you can:</p>\n\n<ul>\n  <li>see how many private, public and inactive projects are in the organisation</li>\n  <li>see and manage team members</li>\n  <li>manage billing (administrator users only)</li>\n  <li>leave this organisation</li>\n  <li>delete this organisation (administrator users only)</li>\n</ul>\n"
  },
  
  {
    "title" : "Collaborating with team members",
    "docs_orgs" : "true",
    "url"     : "/docs/orgs/collaborating-with-team-members",
    "slug"     : "collaborating-with-team-members",
    "content": "<p>Go to the ‘Members’ tab in the ‘Manage organisation’ section to invite new team members.</p>\n\n<ul>\n  <li>The Free and Starter plan only have administrators.</li>\n  <li>The Team, Pro and Enterprise plan have administrators and collaborators.</li>\n</ul>\n\n<p><img src=\"https://res.cloudinary.com/snyk/image/upload/f_auto,q_auto,w_auto/v1466629385/docs-collaborate_scaled.jpg\" alt=\"Team members\" /></p>\n\n<table class=\"table-responsive\">\n  <thead>\n    <tr>\n      <th>User permissions within an organisation</th>\n      <th>Administrator</th>\n      <th>Collaborator</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Add/delete projects</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td>Update project with new snapshot</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td>Delete snapshot from project history</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td>Invite/remove team members</td>\n      <td>x</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Change team members’ roles</td>\n      <td>x</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Manage plans and billing for this organisation</td>\n      <td>x</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Leave organisation</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td>Delete organisation</td>\n      <td>x</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>An organisation can have multiple administrators. When you create an organisation, you will automatically be an administrator on this organisation. If you want to downgrade to collaborator, or leave this organisation, the organisation has to have at least one other administrator.</p>\n\n<p>Note: you will always be the administrator of your default organisation, and you can’t leave or delete this organisation.</p>\n"
  },
  
  {
    "title" : "How Snyk finds out about new vulnerabilities",
    "docs_security" : "true",
    "url"     : "/docs/security/how-snyk-finds-out-about-new-vulnerabilities",
    "slug"     : "how-snyk-finds-out-about-new-vulnerabilities",
    "content": "<p>We monitor existing node.js security portals and tools, such as (Node Security Project)[https://nodesecurity.io/], the <a href=\"https://groups.google.com/forum/#!forum/nodejs-sec\">nodejs-sec Google Group</a>, or <a href=\"http://retirejs.github.io/retire.js/\">Retire.js</a>. We also monitor Github activity and other online sources for new vulnerabilities.</p>\n"
  },
  
  {
    "title" : "Snyk’s process for creating patches",
    "docs_security" : "true",
    "url"     : "/docs/security/snyk-s-process-for-creating-patches",
    "slug"     : "snyk-s-process-for-creating-patches",
    "content": "<p>Patches are created and maintained by Snyk. If the package owner has made code changes to fix the issues, our patch is based on this official fix, and we remove any cosmetic or unrelated changes. If a package owner has not addressed the vulnerability yet, we write a patch from scratch.</p>\n\n<p>Before releasing it, we verify the patch, backport it to older versions, and test that the patch hasn’t broken functionality.</p>\n\n<p>The patches are a part of <a href=\"https://github.com/Snyk/vulndb/\">Snyk’s open source vulnerability database</a>, so you can check them out before applying them. For example, the patches for the <a href=\"https://github.com/Snyk/vulndb/tree/master/data/npm/ms/20151024\">ms ReDoS vulnerability</a>.\nWe don’t have patches for every case - if you need one that’s missing, <a href=\"mailto:contact@snyk.io\">let us know</a>. We also <a href=\"https://github.com/Snyk/vulndb/blob/master/CONTRIBUTING.md\">accept pull requests</a>!</p>\n"
  },
  
  {
    "title" : "Disclosure policy",
    "docs_security" : "true",
    "url"     : "/docs/security/disclosure-policy",
    "slug"     : "disclosure-policy",
    "content": "<p>We at snyk value the security community and believe that responsible disclosure of security vulnerabilities helps us ensure the security and privacy of the users.\n​\nA responsible disclosure program includes a policy with clear and simple rules of engagement for security researchers to report vulnerabilities they discover. It protects both the developer and researcher, while allowing developers to safely benefit from vulnerabilities discovered by researchers.\n​\nSecurity vulnerabilities can be reported to us, and we will manage the responsible disclosure procedure, (1) receiving the report, (2) notifying the developer, (3) coordinating the fix and (4) publicly disclosing the vulnerability giving full credit to the researcher.</p>\n\n<h3 id=\"report\">1. Report</h3>\n\n<p>Receiving the submitted vulnerability report from the researcher/reporter, sent to <a href=\"&#109;&#097;&#105;&#108;&#116;&#111;:&#114;&#101;&#112;&#111;&#114;&#116;&#064;&#115;&#110;&#121;&#107;&#046;&#105;&#111;\">&#114;&#101;&#112;&#111;&#114;&#116;&#064;&#115;&#110;&#121;&#107;&#046;&#105;&#111;</a>.\nSnyk will verify and document each reported vulnerability prior to developer notification.</p>\n\n<h3 id=\"developer-notification\">2. Developer Notification</h3>\n\n<p>The first phase of the public disclosure process, goal is to provide vulnerability details necessary for the developer to begin its internal resolution process.</p>\n\n<p>If the developer has not acknowledged receipt within 30 business days of the original notification, Snyk will retransmit the vulnerability details to the original contact and at least one secondary contact, if a secondary contact is publicly available. If the developer allows an additional ten business days to elapse following the second notification (40 business days since original notification) without acknowledging the information, vulnerability details will be re-sent not only to the previous two contacts, but also to customers or other stakeholders at Snyk’s discretion.</p>\n\n<p>If the product developer does not respond to any of the three notification attempts within an additional ten days following the third notification (50 business days since original notification), or if the developer indicates that it does not wish to coordinate disclosure, Snyk may elect to issue a public advisory (Step 4).\nAcknowledgement of the notification by the developer should include all of the following items:</p>\n\n<p>a. developer confirms the vulnerability information is received and the schedule for investigation.<br />\nb. developer provides a point of contact responsible for coordinating and tracking information on the issue from within its organization.<br />\nc. developer provides an estimate as to when it expects to complete its initial investigation of the security issue provided in the notification.</p>\n\n<h3 id=\"developer-coordination\">3. Developer Coordination</h3>\n\n<p>Upon successful acknowledgement of the notification, Snyk will work with the developer to determine how the security issue will be addressed. The following tasks are included within this phase:</p>\n\n<p>a. At developer’s request, Snyk will provide additional information to assist in the development of a solution.<br />\nb. At developer’s request, Snyk may review proposed solutions for effectiveness.<br />\nc. The developer and Snyk will exchange proposed timing for public disclosure of the issue and related solution for mutual approval.<br />\n​\nIf developer responses to all communications in this phase are not received within ten business days, Snyk may move directly to the Public Disclosure phase.</p>\n\n<h3 id=\"public-disclosure\">4. Public disclosure</h3>\n\n<p>Public Disclosure is the final phase of the disclosure process. During this phase, Snyk intent is to add the vulnerability to it’s <a href=\"https://snyk.io/vuln/\">public database (vulndb)</a>, provide information on the vulnerability and related solutions. Public Disclosure may be initiated either by completing the Developer Coordination phase or through a process failure in prior phases.</p>\n\n<p>During the Public Disclosure phase Snyk, and optimally the developer, will disseminate information on the vulnerability and related solution to the public. Snyk may disseminate information through public e-mail lists, web pages or any other medium it deems appropriate to reach the intended audiences.</p>\n\n<h3 id=\"pgp-key\">5. PGP Key</h3>\n\n<p>As mentioned above, you can report issues simply by emailing us at <a href=\"&#109;&#097;&#105;&#108;&#116;&#111;:&#114;&#101;&#112;&#111;&#114;&#116;&#064;&#115;&#110;&#121;&#107;&#046;&#105;&#111;\">&#114;&#101;&#112;&#111;&#114;&#116;&#064;&#115;&#110;&#121;&#107;&#046;&#105;&#111;</a>, and a member of the Snyk team will review your confidential report.</p>\n\n<p>If possible, we recommend you encrypt such vulnerabiltiiy disclosures using the following PGP key:</p>\n\n<pre><code class=\"language-language-markup\">-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBFeF/s0BEADCn8LlbRrbKaKlrq1ss0nbfcs3mtRAAZeQFb1BAArCD5ycdJWM\nbDdJfONdHC6kqrctCFKUj3gLi7cpzE8Cd8xbt+ieDNcX1uBFuYijpzPg9JQhzMt4\nk24IDJf/Rrl4biQQKAbu4W77aNasvT13A/FiSW8ClPsiZzAfNMdEZSNPUJzVsGH/\nTWuqbTd72RDENDIkrMxNEaebxHEES6GfmKkbIkNpBS7Rf2MAm7AFaGHlYcnHorjs\noBr9MrEOjiorpdhiQ8sRwdECBWp1cfVFLj9oLXJiS3kk0M2nJnM/yWZbiarFtzu3\n3G5rS9Xua+yzQFWLaSyFx6KQGAiCFL035FA5IZ/w/Sm5+ZXZeDxGktAd4X7yaJBv\nDDj0GEkAHjslXYMokm9jQTktDdxS78u5dH3Wyk8sftNTayg9w/21qlpxnlFz79WL\nQKkf/PTjgccBmruZ3lMPlzSWLwCOWdDy2wUrFqMfOMjcKfo0clGOZK8DNBUPCdf+\n0FcEBR1+jPqvFt7QoAEoqpl3fIjmuIqgWEuprDWVScDGJyCyw4pE1CJIaQtKgZf9\n9e3xOgSDdhYOCIwIv14yfMVCXZ5nI5A8is8JP//ZAVC8ZJsYcqz4d6es5N9xIaI9\n9u4+WaDcRjqTxTPBHJZLPsMy83TTOxPDxmB2Xa8Tno3cavSTzfRR44GXRQARAQAB\ntCJTbnlrJ3MgRGlzY2xvc3VyZSA8cmVwb3J0QHNueWsuaW8+iQI9BBMBCgAnBQJX\nhf7NAhsDBQkS0UkABQsJCAcDBRUKCQgLBRYCAwEAAh4BAheAAAoJEM9JPnxu3Fqm\nC/4P/3uYerVrz8yXhrP9hYT98hX/1zST5AFM2FJ3+QK5Ir+6pAD3b11ggsAyXTqo\ndr+VvyC04GRGNv8mMVfitSaJbkqUXupL++L2g4tftI1JbsFaS9qf/aIZKjCRtZti\niYj1hmZsNd2FMUvcDLuA6WqAoeLW6YeDflJu9PMJUNcK+bHHM75zj4FyX1WIRrQw\nCA3oMzgE7vF9c41RSWEL5kqeOHIa4NXNTyUexa5jOe8W1gfRV6vC0ZObKnKTv/SH\nHau20mueObefGvapoMRqwZBgjzHyf1GIyKxd6qkdawNbVW+s4iF4L+LTzkXYmCtH\nUsU6gCMuWn/KDp6armnhYZYvjcTk48gWFN/3JVyBr1s2dYL6MB7pfPth1kfLaVSI\nbB5MfETHe2FVFcVFMW86sFN+HG8cY4i/SEdcV04jK/AqRmJbOPFPlPDAg3jRWK11\nluMJ+0kCBV7y+AlI6jviNhxE3sgezZyTq0yEBj4/u8bG40TPUqrwwpbjXvYhREoV\ngrrYWKUljQOVyVoLSOBSJ7EQUcCVSYA59LTo7EY0yoMsO1tl8kUIu/Gu3khl5o4c\nKKZvk/0EodWNJrflOtu0Qu0vghqSlXF3Fm+tLV1xKxal2d8S4RUdq0zuP24G6fGv\nRQiDMzKEQy5jzt8L5x7wAg37qgYBVKhsH9M3O1u+U1xBcSafuQINBFeF/s0BEADA\nN6kGL30pHnkgeQ4ORLd9g1z5R9glo+1OUqWqa7bTVCe+1WHT3yRUUU/kOKKldFBK\nDwrlqs0vgchLhj3oietYFaHo3eQ1TWpUv03Gv2KFszUoDnBrcTq5LP2IcfC8ek7E\nZuRlEAc5yXrLzrRCMgIt7wYIDZ+14/K/1H/c91ygryJU+C3SmNAvNBhiAbevCUSr\nB290gVmQ0h/6v2plAD3yvv08jfwjYCTIftvpO6wMWCQt4Vz+8gRTwmSgrNKf26Fn\nsiT46ptaiK5rCpq1fOaBzBXVPNnzHT3iaNq+30brxQKBA8OxVc1VR9XPaHIXjBLY\n/Kt2br8/dMsnLeJ/MJ9/Q7A7sm5syjnS8jMmf9yEJI7dQOcTLMz8pp8v3VHzyTng\nZcdJ4CePr/mrr7MrIIjALzXa7SuxUTTYMlYuP3fVT5pFoNsSB4BLyt4gs0XdBSFl\nozLG+VKlOTAClPhqczIAHMJ5k6JXzsPuEiBIkcvoaD+OhscaOXGS3/2i0L2QYUTO\niLTdOfoJvQSfmOA+2s1UYdypcOalurwvCHT5Le7AN3vaZx7DO7E0TtsNUuilX1VH\n51sSWP9ZN23G91f9aZwLYbXVhEoTFujXzoSl45GHMFSSWxAQUQAMpzH2NcRPfjwG\nFu0p88ohEglJPFRz6QPRNtq7qXoG5oboDf+PI2OODQARAQABiQIlBBgBCgAPBQJX\nhf7NAhsMBQkS0UkAAAoJEM9JPnxu3Fqm0jIP/Rx0ciIq+XWr3DVizjU4yxi4u2wn\nfsq6WlZxWxsomn48/2ajIrE8MxGyKY5FGekyJk8VbcZloW6Oi1BoY39AnG9Lgxeh\nIIqFU/6kWk+azGnzU1KzkJtKvyO/RLF5/uqC9d77Njc5Hofia11IojEye0Dln+nm\n1J96UQ4UafuprfjgjZ0o6k78AmXey8/E27QI5s7ue188jt/DdW7uGEBcBE2uNdSH\nj8f4GNAWLc0wFSf14B4WP8lgmptUMrbj3UcEYx1m/xDbhCFNiBgYnqtRj4e3Bee2\nYf08id59ap7L+qco7eg7irfmJwPUgG/LeZvax6Y9tXM/m2oxJ1sLEJn255hOFE9/\nCmWHpXwUzJhRe4X4tQQJlj+UH9JYvYmPY0PTGa0asZyEBiUaefGV0X03bw+2M7y6\n5QUTxsuyLFMAE5Zb1JUYbru3B9x3Ct4my78sIh532gXWGSw9jvuwdufYVP5ass4G\ntTVdYd7ILnLJo+4xo6nxZ6qBUZYt46/6E+Glf339mVi5OiGnBaxj6njq6pIO09QB\nloDy/4YB/g4rTmm4y946mG0qMMRs262ud47n9Ou0rNYmemHw0xSNigOvLOKq73cf\nXZG1I1nwLKTP/w5UeSx8pk9CSuGtLuhiJPDwhhHmFFz8ibdOQRHk8kE4w7kUhfww\nJtT74y0R2sMYMxjs\n=NdUO\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>\n"
  },
  
  {
    "title" : "How to integrate GitHub to test and watch your repositories",
    "docs_github" : "true",
    "url"     : "/docs/github/how-to-integrate-github-to-test-and-watch-your-repositories",
    "slug"     : "how-to-integrate-github-to-test-and-watch-your-repositories",
    "content": "<p>You can add your GitHub repos and quickly test them, or decide which ones you’d like to continously watch with Snyk.</p>\n\n<p><img src=\"http://res.cloudinary.com/snyk/image/upload/q_auto,f_auto,w_auto/v1474293733/Your_GitHub_repositories.png\" alt=\"Adding your GH repos\" /></p>\n\n<ol>\n  <li>Click the “Test my GitHub repositories” button on your Dashboard, the Projects page or the Test page.</li>\n  <li>You need to grant Snyk additional GitHub permissions. If you haven’t granted permissions yet, you need to do so on GitHub.</li>\n  <li>Next, you’ll see a list of all GitHub repos across your GitHub organisations. Snyk automatically tests these repos, and you’ll see the test results, with the option to view a detailed test report.</li>\n  <li>Clicking ‘Watch’ will add this repo as a project to Snyk. The watched repos appear in your projects, and will be continuously checked for vulnerabilities.</li>\n  <li>“Open a fix PR” lets you fix vulnerabilities right away. You’ll be able to review the suggested remediations, and create a PR with the required upgrades or patches.</li>\n</ol>\n"
  },
  
  {
    "title" : "Integration features",
    "docs_github" : "true",
    "url"     : "/docs/github/integration-features",
    "slug"     : "integration-features",
    "content": "<p>Watch a GitHub repo to add it as a project to Snyk. This will allow you to:</p>\n\n<ul>\n  <li>see Snyk tests in your pull request that check for vulnerabilities</li>\n  <li>get email alerts and a Snyk pull request with fixes when new vulnerabilities that affect your repo are disclosed</li>\n  <li>get email alerts and a Snyk pull request if a new upgrade or patch is available for a vulnerability that affects you</li>\n  <li>trigger a Snyk pull request with fixes yourself from the test report page or the project page for your repo on snyk.io</li>\n</ul>\n"
  },
  
  {
    "title" : "Snyk Test on your pull requests",
    "docs_github" : "true",
    "url"     : "/docs/github/snyk-test-on-your-pull-requests",
    "slug"     : "snyk-test-on-your-pull-requests",
    "content": "<p><img src=\"http://res.cloudinary.com/snyk/image/upload/q_auto,f_auto,w_auto/v1474294875/Snyk_Test_in_PR.png\" alt=\"Snyk Test on pull requests\" /></p>\n\n<p>Snyk tests will be visible in pull requests on repos that you are watching with Snyk.\nYou can review and adjust the settings for this by going to the ‘Settings’ for the watched project:</p>\n\n<p><img src=\"http://res.cloudinary.com/snyk/image/upload/q_auto,f_auto,w_auto/v1474296632/Snyk_Test_PR_Settings.png\" alt=\"Snyk Test on pull request settings\" /></p>\n\n<ul>\n  <li>By default, Snyk runs a test when the dependencies in the package.json change, and fails the test if the new dependencies have vulnerabilities.</li>\n  <li>You can change this to fail if the repository has any existing vulnerabilities (so tests will fail even if the current PR is not adding new vulnerable dependencies).</li>\n  <li>You can choose to fail tests only for high severity vulnerabilities.</li>\n  <li>You can disable Snyk tests in pull requests.</li>\n</ul>\n"
  },
  
  {
    "title" : "Fix vulnerabilities with Snyk pull requests",
    "docs_github" : "true",
    "url"     : "/docs/github/fix-vulnerabilities-with-snyk-pull-requests",
    "slug"     : "fix-vulnerabilities-with-snyk-pull-requests",
    "content": "<p>When viewing a Snyk test report for a repo that you own, or when looking at a project that you are watching with Snyk, you’ll see two options for fixing a vulnerability:</p>\n\n<p>1) <strong>‘Open a fix PR’ link:</strong>\nGenerate a Snyk pull request with the minimal changes needed to fix the vulnerabilities affecting the repo.</p>\n\n<p>2) <strong>‘Fix this vulnerability’ link:</strong>\nGenerate a Snyk pull request that fixes only this vulnerability.</p>\n\n<p><img src=\"http://res.cloudinary.com/snyk/image/upload/c_scale,w_774/v1478172579/docs/Fix_vulnerabilities_with_a_pull_request.png\" alt=\"Fix button\" /></p>\n\n<p>You can review the vulnerabilities that will be fixed, change your selection, and choose to ignore any vulnerabilties that can’t be fixed right now before opening the pull request on the ‘Open a fix PR’ page:</p>\n\n<p><img src=\"https://res.cloudinary.com/snyk/image/upload/v1478172977/docs/Open_a_fix_PR.png\" alt=\"Open a fix PR page\" /></p>\n\n<p>Here’s an example for the pull request:</p>\n\n<p><img src=\"https://res.cloudinary.com/snyk/image/upload/v1478173163/docs/Snyk_fix_PR_example.png\" alt=\"Snyk remediation PR\" /></p>\n\n<h4 id=\"get-a-snyk-pull-request-when-newly-disclosed-vulnerabilities-affect-you\">Get a Snyk pull request when newly disclosed vulnerabilities affect you</h4>\n\n<p>Whenever a vulnerability is disclosed that affects a repo you’re watching, Snyk will not only email you about it, but also generate a Snyk pull request that addresses the vulnerabilities. It’s the same pull request as in the example above.</p>\n\n<h4 id=\"get-a-snyk-pull-request-when-new-upgrades-or-patches-are-available\">Get a Snyk pull request when new upgrades or patches are available</h4>\n\n<p>When no upgrade is available, you can ignore or patch a vulnerability. When a better remediation option has become available, for example an upgrade for a vulnerability you previously ignored, Snyk notifies you about this via email, and also generates a pull request with the new fix.</p>\n"
  },
  
  {
    "title" : "Disabling the GitHub integration",
    "docs_github" : "true",
    "url"     : "/docs/github/disabling-the-github-integration",
    "slug"     : "disabling-the-github-integration",
    "content": "<p>If you don’t want to watch a GitHub repo anymore, you can stop watching this project via the project settings. The project will be set to inactive, and you’ll no longer get alerts, pull requests, or Snyk test on your pull requests. The web hook that enables the GitHub integration for this repo will be removed.</p>\n\n<p>You can re-start watching at any time.</p>\n"
  },
  
  {
    "title" : "Integrating Snyk into your build system",
    "docs_ci" : "true",
    "url"     : "/docs/ci/integrating-snyk-into-your-build-system",
    "slug"     : "integrating-snyk-into-your-build-system",
    "content": "<p>To continuously avoid known vulnerabilities in your dependencies, integrate Snyk into your continuous integration (a.k.a. build) system. Here are the steps required to to so:</p>\n\n<ol>\n  <li>Install the Snyk utility using <code class=\"highlighter-rouge\">npm install -g snyk</code>.</li>\n  <li>Run <code class=\"highlighter-rouge\">snyk wizard</code> in the directory of your project following the prompts which will also generate a <code class=\"highlighter-rouge\">.snyk</code> policy file. For more information about this, see <a href=\"/docs/using-snyk/#wizard\">our CLI documentation</a>.</li>\n  <li>Ensure the <code class=\"highlighter-rouge\">.snyk</code> file you generated was added to your source control (<code class=\"highlighter-rouge\">git add .snyk</code>).</li>\n  <li>If you selected to, Snyk will include <code class=\"highlighter-rouge\">snyk test</code> as part of your <code class=\"highlighter-rouge\">npm test</code> command, so if there are new vulnerabilities in the future, your CI will fail, protecting you from introducing vulnerabilities to production. Alternatively, you can add <code class=\"highlighter-rouge\">snyk test</code> to any other CI test platform you use.</li>\n</ol>\n\n<p>To stay secure over time, Snyk alerts you about newly disclosed vulnerabilities that affect your project’s dependencies. \nTo make sure the list of dependencies we have for your project is up to date, refresh it continuously by running <code class=\"highlighter-rouge\">snyk monitor</code> in your deployment process. You’ll also need to authenticate to Snyk, so we know where to update the dependencies.</p>\n\n<p>To do both, add the following to your deployment scripts:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>snyk auth $SNYK_TOKEN\nsnyk monitor\n</code></pre>\n</div>\n\n<p>Configure your environment to include the <code class=\"highlighter-rouge\">SNYK_TOKEN</code> environment variable. You can find your API token in your <a href=\"https://snyk.io/account/\">account settings on snyk.io</a>.</p>\n\n<h4 id=\"important-note\">Important note:</h4>\n\n<p>Make sure you don’t check your API token into source control, to avoid exposing it to others. Instead, use your CI environment variables to configure it.</p>\n\n<p>See guidance for how to do this on:</p>\n\n<ul>\n  <li><a href=\"https://docs.travis-ci.com/user/environment-variables/\">Travis</a></li>\n  <li><a href=\"https://circleci.com/docs/environment-variables/\">Circle</a></li>\n  <li><a href=\"https://codeship.com/documentation/continuous-integration/set-environment-variables/\">Codeship</a></li>\n  <li><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables\">Jenkins</a></li>\n  <li><a href=\"https://confluence.atlassian.com/bamboo/bamboo-variables-289277087.html\">Bamboo</a></li>\n</ul>\n\n<p>You can find others through an easy <a href=\"https://www.google.co.uk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=setting+up+env+variables+in+CI\">Google search</a>.</p>\n"
  },
  
  {
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/",
    "slug"     : "",
    "content": "<p>Snyk helps you find and fix known vulnerabilities in your Node.js dependencies, both ad hoc and as part of your CI (Build) system.</p>\n\n"
  },
  
  {
    "title" : "Installation",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/installation",
    "slug"     : "installation",
    "content": "<p>Snyk is installed via npm. Run these commands to install it for local use:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\">npm install -g snyk</code></pre></div>\n\n<p>Once installed, you can perform a quick test on a public package, for instance:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\">snyk test ionic@1.6.5</code></pre></div>\n\n<p>As you can see, Snyk found and reported several vulnerabilities in the package. For each issue found, Snyk provides the severity of the issue, a link to a detailed description, the path through which the vulnerable module got into your system, and guidance on how to fix the problem.</p>\n\n<div class=\"screenshot\">\n<h3 class=\"screenshot__label\">Example output</h3>\n<pre class=\"code\">$ snyk test\n<span class=\"syn--red\">✗ Vulnerability found on gm@1.13.3</span>\nInfo: https://snyk.io/vuln/npm:gm:20151026\nFrom: snyk-demo-app@latest &gt; gm@1.13.3\n<span class=\"syn--white syn--bold\">Upgrade direct dependency gm@1.13.3 to gm@1.21.1</span>\n\n<span class=\"syn--red\">✗ Vulnerability found on qs@0.6.6</span>\nInfo: https://snyk.io/vuln/npm:qs:20140806\nFrom: snyk-demo-app@latest &gt; webdriverio@2.4.5 &gt; request@2.34.0 &gt; qs@0.6.6\n<span class=\"syn--white syn--bold\">Upgrade direct dependency webdriverio@2.4.5 to webdriverio@3.0.1 (triggers upgrades to request@2.40.0 &gt; qs@1.0.0)</span>\n\n<span class=\"syn--red\">✗ Vulnerability found on qs@0.4.2</span>\nInfo: https://snyk.io/vuln/npm:qs:20140806-1\nFrom: snyk-demo-app@latest &gt; cucumber@0.3.0 &gt; connect@2.3.2 &gt; qs@0.4.2\nNo direct dependency upgrade can address this issue.\n<span class=\"syn--white syn--bold\">Run `snyk wizard` to explore remediation options</span></pre>\n</div>\n"
  },
  
  {
    "title" : "Authentication",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/authentication",
    "slug"     : "authentication",
    "content": "<p>Some Snyk commands require authentication. We use GitHub for authentication, but <strong>do not require access to your repositories</strong>, only your email address. You can authenticate by clicking <a href=\"https://snyk.io/auth/github\">“Sign Up”</a>, and pasting in the lines from your dashboard, which look roughly like this:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">snyk auth &lt;your token&gt;</span></code></pre></div>\n\n<p>Alternatively, you can run <code class=\"highlighter-rouge\">snyk auth</code> in your terminal and it’ll guide you through this process. Or jump right into Snyk’s <a href=\"#wizard\"><code>wizard</code></a>, that will also take you through authentication.</p>\n"
  },
  
  {
    "title" : "Wizard",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/wizard",
    "slug"     : "wizard",
    "content": "<p>Snyk’s <code>wizard</code> walks you through finding and fixing the known vulnerabilities in your project. It leverages the separate <a href=\"#test\"><code>test</code></a>, <a href=\"#protect\"><code>protect</code></a> and <a href=\"#monitor\"><code>monitor</code></a> actions, supported by an interactive workflow. To run the wizard, navigate to your project folder and run <code>snyk wizard</code> like so:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">cd ~/projects/myproj/</span>\n<span class=\"go\">snyk wizard</span></code></pre></div>\n\n<p>The wizard goes through multiple phases.\nFirst, it takes stock of which dependencies are locally installed, queries the snyk service for related known vulnerabilities, and asks you how you want to address each vulnerability that was found. As you answer the questions, the wizard will create a Snyk policy file, stored in a file named <code>.snyk</code>, which will guide future Snyk commands.</p>\n\n<p>Here are the possible remediation steps for each vulnerability:</p>\n\n<ul>\n  <li><strong>Upgrade</strong> - if upgrading a direct dependency can fix the current vulnerability, the wizard can automatically modify your <code>package.json</code> file to use the newer version and run <code>npm update</code> to apply the changes.</li>\n  <li><strong>Patch</strong> - Sometimes there is no direct upgrade that can address the vulnerability, or there is one but you can’t upgrade due to functional reasons (e.g. it’s a major breaking change). For such cases, the wizard lets you patch the issue (using patches the Snyk team created and maintain). This option will make the minimal modifications to your locally installed module files to fix the vulnerability. It will also update the policy to patch this issue when running <a href=\"#protect\"><code>snyk protect</code></a>, as shown below.</li>\n  <li><strong>Ignore</strong> - If you believe this vulnerability is not exploitable, you can set the Snyk policy to ignore this vulnerability. By default, we will ignore the vulnerability for 30 days, to avoid easily hiding a true issue. If you want to ignore it permanently, you can manually edit the generated <code>.snyk</code> file. If neither a patch nor an upgrade are available, you can choose to ignore the issue for now, and we’ll notify you when a new patch or upgrade is available.</li>\n</ul>\n\n<p>If more than one vulnerability is introduced via the same module, then the wizard groups them. You can upgrade, patch or ignore all of them; or if you want to see more details, you can review each vulnerability separately.</p>\n\n<div class=\"screenshot\">\n<h3 class=\"screenshot__label\">Example output</h3>\n<pre class=\"code\">$ snyk wizard\n\nSnyk's wizard will:\n\n  * Enumerate your local dependencies and query Snyk's servers for vulnerabilities\n  * Guide you through fixing found vulnerabilities\n  * Create a .snyk policy file to guide snyk commands such as test and protect\n  * Remember your dependencies to alert you when new vulnerabilities are disclosed\n\nLoading dependencies...\nQuerying vulnerabilities database...\nTested 228 dependencies for known vulnerabilities, <span class=\"syn--red syn--bold\">found 5 vulnerabilities.</span>\n\n<span class=\"syn--green\">?</span> <span class=\"syn--white syn--bold\">High severity vulnerability found in gm@1.13.3\n  - info: <a href=\"https://snyk.io/vuln/npm:gm:20151026\" title=\"Vulnerability report.\">https://snyk.io/vuln/npm:gm:20151026</a>\n  - from: snyk-demo-app@latest &gt; gm@1.13.3</span> <span class=\"syn--blue\">Upgrade</span>\n\n<span class=\"syn--green\">?</span> <span class=\"syn--white syn--bold\">4 vulnerabilities introduced via falcor-router-demo@1.0.3\n  - info: <a href=\"https://snyk.io/package/npm/falcor-router-demo/1.0.3\" title=\"Package test report.\">https://snyk.io/package/npm/falcor-router-demo/1.0.3</a>\n  Remediation options (Use arrow keys)</span>\n<span class=\"syn--blue\">❯ Upgrade to falcor-router-demo@1.0.5 (triggers upgrade to semver@4.3.3, qs@4.0.0) </span>\n  Review vulnerabilities separately\n  Set to ignore for 30 days (updates policy)\n  Skip</pre>\n</div>\n\n<p>Once all the issues are addressed, <code>snyk wizard</code> will optionally integrate some tests and protection steps into your <code>package.json</code> file:\n<ul>\n\t<li>It can add <a href=\"#test\"><code>snyk test</code></a> to the <code>test</code> script, which will query your local dependencies for vulnerabilities and err if found (except those you chose to ignore).</li>\n\t<li>If you chose to patch an issue, the wizard will optionally add <a href=\"#protect\"><code>snyk protect</code></a> to your project as a <code>post-install</code> step. This is helpful if you publish this module, as it will repeatedly patch the issues specified in <code>.snyk</code> every time a module is installed.&lt;/p&gt;</li>\n</ul>\n\n<p>Lastly, the wizard will create the <code>.snyk</code> file, modify <code>package.json</code> and run <code>npm update</code> to apply the changes. To monitor your project for new vulnerabilities, the wizard takes a snapshot of your current dependencies (similar to running <a href=\"#monitor\"><code>snyk monitor</code></a>). You can see all the snapshots for a project on the snyk website. We'll notify you via email if you're affected by newly disclosed vulnerabilities in them, or when a previously unavailable patch or upgrade path are available.</p>\n\n<h3 id=\"a-few-things-to-note\">A few things to note:</h3>\n\n<ul>\n  <li>The wizard doesn’t perform any git (or source control) actions, so be sure to add the <code>.snyk</code> file to your repository.</li>\n  <li>Subsequent runs of the wizard will not show items previously ignored. To start a-fresh, run <code>snyk wizard --ignore-policy</code>.</li>\n  <li>By default, both <code>wizard</code> and <a href=\"#test\"><code>test</code></a> ignore devDependencies. To test those, add the <code>--dev</code> flag.</li>\n</ul>\n</p>\n"
  },
  
  {
    "title" : "Test",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/test",
    "slug"     : "test",
    "content": "<p>To only test your project for known vulnerabilities, browse to your project’s folder and run <code>snyk test</code>:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">cd ~/projects/myproj/</span>\n<span class=\"go\">snyk test</span></code></pre></div>\n\n<p><code>snyk test</code> takes stock of all the local dependencies and queries the snyk service for related known vulnerabilities. It displays the found issues along with additional information, and suggests remediation steps. Since <code>snyk test</code> looks at the locally installed modules, it needs to run after <code>npm install</code>, and will seamlessly work with <code>shrinkwrap</code>, npm enterprise or any other custom installation logic you have.</p>\n\n<p><code>snyk test</code> can also get a folder name as an argument, which is especially handy if you want to <strong>test multiple projects.</strong> For instance, the following command tests all the projects under a certain folder for known vulnerabilities:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">cd ~/projects/</span>\n<span class=\"go\">snyk test *</span></code></pre></div>\n\n<p>To address the issues <code>snyk test</code> found, run <a href=\"#wizard\"><code>snyk wizard</code></a>.</p>\n\n<p>You can also use <code>snyk test</code> to <strong>scrutinize a public package before installing it</strong>, to see if it has known vulnerabilities or not. Using the package name will test the latest version of that package, and you can also provide a specific version or range using <code>snyk test module[@semver-range]</code>.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">snyk test lodash</span>\n<span class=\"go\">snyk test ionic@1.6.5</span></code></pre></div>\n\n<p><strong>To test a public Github repository,</strong> run <code>snyk test</code> and include the Github URL to the repo.</p>\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">snyk test https://github.com/snyk/snyk</span></code></pre></div>\n<h3 id=\"git-url-formats\">The following git URL formats are supported:</h3>\n\n<ul>\n  <li>git://github.com/user/project.git#commit-ish</li>\n  <li>https://github.com/user/project#commit-ish</li>\n  <li>user/project#commit-ish</li>\n</ul>\n<p>This also works for Bitbucket and GitLab.</p>\n<p>You can also test a public npm package or Github project <a href=\"https://snyk.io/test/\" title=\"Test page\">via the Test page on snyk.io</a></p>\n"
  },
  
  {
    "title" : "Protect",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/protect",
    "slug"     : "protect",
    "content": "<p>The <code>protect</code> command applies the patches specified in your <code>.snyk</code> file to the local file system. Run <code>snyk protect</code> after you’ve created a .snyk file and installed your local dependencies (e.g. by running <code>npm install</code>).<code>snyk wizard</code> will do this as a last step. </p>\n\n<p>Since running <code>protect</code> is the way to repeatedly apply patches, you should run it every time you reinstall your modules. Common integration points would be your CI/build system, your deployment system, and adding it as a post installation step in your <code>package.json</code> file (necessary if you consume this module via <code>npm</code>).</p>\n"
  },
  
  {
    "title" : "Monitor",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/monitor",
    "slug"     : "monitor",
    "content": "<p>With <a href=\"#test\"><code>test</code></a> and <a href=\"#protect\"><code>protect</code></a>, you’re well set up to address currently known vulnerabilities. However, new vulnerabilities are constantly disclosed - which is where <code>monitor</code> comes in.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">cd ~/projects/myproject/ snyk monitor</span></code></pre></div>\n\n<p>Just before you deploy, run <code>snyk monitor</code> in your project directory. This will take a snapshot of your current dependencies, so we can notify you about newly disclosed vulnerabilities in them, or when a previously unavailable patch or upgrade path are created. If you take multiple snapshots of the same project, we will only alert you to new information about the latest one.</p>\n\n<p>Log in and go to <a href=\"https://snyk.io/monitor/\">snyk.io/monitor</a> to see the lastest snapshot and history of your project.</p>\n\n<div class=\"screenshot\">\n<h3 class=\"screenshot__label\">Example output</h3>\n<pre class=\"code\">$ snyk monitor\nCaptured a snapshot of this project's dependencies. Explore this snapshot at https://snyk.io/monitor/1a53f19a-f64f-44ab-b122-74ce82c1c34b\nNotifications about newly disclosed vulnerabilities related to these dependencies will be emailed to you.</pre>\n</div>\n"
  },
  
  {
    "title" : "Integrating Snyk into your dev workflow",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/integrating-snyk-into-your-dev-workflow",
    "slug"     : "integrating-snyk-into-your-dev-workflow",
    "content": "<p>To continuously avoid known vulnerabilities in your dependencies, integrate Snyk into your continuous integration (a.k.a. build) system. Here are the steps required to to so:</p>\n\n<ol>\n  <li>Install the Snyk utility using <code class=\"highlighter-rouge\">npm install -g snyk</code>.</li>\n  <li>Run <code class=\"highlighter-rouge\">snyk wizard</code> in the directory of your project following the prompts which will also generate a <code class=\"highlighter-rouge\">.snyk</code> policy file.</li>\n  <li>Ensure the <code class=\"highlighter-rouge\">.snyk</code> file you generated was added to your source control (<code class=\"highlighter-rouge\">git add .snyk</code>).</li>\n  <li>If you selected to, Snyk will include <code class=\"highlighter-rouge\">snyk test</code> as part of your <code class=\"highlighter-rouge\">npm test</code> command, so if there are new vulnerabilities in the future, your CI will fail, protecting you from introducing vulnerabilities to production. Alternatively, you can add <code class=\"highlighter-rouge\">snyk test</code> to any other CI test platform you use.</li>\n</ol>\n\n<p>If you monitor a project with Snyk, you’ll get notified if your project’s dependencies are affected by newly disclosed vulnerabilities. To make sure this list of dependencies is up to date, refresh it continuously by running <code class=\"highlighter-rouge\">snyk monitor</code> in your deployment process. You’ll also need to authenticate to Snyk, so we can know where to update the dependencies.</p>\n\n<p>To do both, add the following to your deployment scripts:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>snyk auth $SNYK_TOKEN\nsnyk monitor\n</code></pre>\n</div>\n\n<p>Configure your environment to include the <code class=\"highlighter-rouge\">SNYK_TOKEN</code> environment variable. You can find your API token on the dashboard after logging in.</p>\n\n<p><strong>Important note:</strong></p>\n\n<p>Make sure you don’t check your API token into source control, to avoid exposing it to others. Instead, use your CI environment variables to configure it.</p>\n\n<p>See guidance for how to do this on:</p>\n\n<ul>\n  <li><a href=\"https://docs.travis-ci.com/user/environment-variables/\">Travis</a></li>\n  <li><a href=\"https://circleci.com/docs/environment-variables/\">Circle</a></li>\n  <li><a href=\"https://codeship.com/documentation/continuous-integration/set-environment-variables/\">Codeship</a></li>\n</ul>\n\n<p>You can find others through an easy <a href=\"https://www.google.co.uk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=setting+up+env+variables+in+CI\">Google search</a>.</p>\n"
  },
  
  {
    "title" : "Badge",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/badge",
    "slug"     : "badge",
    "content": "<p>Once you’re vulnerability free, you can put a badge on your README showing your package has no known security holes. This will show your users you care about security, and tell them that they should care too.</p>\n\n<p>Read more about configuring badges in the <a href=\"/docs/badges/\">badges section</a>.</p>\n"
  },
  
  {
    "title" : "Credits",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/credits",
    "slug"     : "credits",
    "content": "<p>While we use multiple sources to determine vulnerabilities, the primary (current) source is the <a href=\"http://nodesecurity.io\">Node Security project</a>.</p>\n"
  },
  
  {
    "docs_badges" : "true",
    "url"     : "/docs/badges/",
    "slug"     : "",
    "content": "<p>Once you’re vulnerability free, you can put a badge on your README showing your package has no known security holes. This will show your users you care about security, and tell them that they should care too.</p>\n\n<p>If there are no vulnerabilities, this is indicated by a green badge.</p>\n\n<p><a class=\"link--unstyled\" href=\"https://snyk.io/test/npm/name\"><img src=\"https://snyk.io/test/npm/name/badge.svg\" alt=\"Known Vulnerabilities\" data-canonical-src=\"https://snyk.io/test/npm/name/\" style=\"max-width:100%;\" /></a></p>\n\n<p>If vulnerabilities have been found, the red badge will show the number of vulnerabilities.</p>\n\n<p><a class=\"link--unstyled\" href=\"https://snyk.io/test/npm/jsbin\"><img src=\"https://snyk.io/test/npm/jsbin/badge.svg\" alt=\"Known Vulnerabilities\" data-canonical-src=\"https://snyk.io/test/npm/jsbin/\" style=\"max-width:100%;\" /></a></p>\n"
  },
  
  {
    "title" : "npm badge",
    "docs_badges" : "true",
    "url"     : "/docs/badges/npm-badge",
    "slug"     : "npm-badge",
    "content": "<p>To show a badge for a given npm package, copy the relevant snippet below and replace “name” with the name of your package.</p>\n\n<h3 id=\"html\">HTML:</h3>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"https://snyk.io/test/npm/name/badge.svg\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"Known Vulnerabilities\"</span> <span class=\"na\">data-canonical-src=</span><span class=\"s\">\"https://snyk.io/test/npm/name\"</span> <span class=\"na\">style=</span><span class=\"s\">\"max-width:100%;\"</span><span class=\"nt\">/&gt;</span>\n</code></pre>\n</div>\n\n<h3 id=\"markdown\">Markdown:</h3>\n\n<div class=\"language-md highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"nv\">![Known Vulnerabilities</span><span class=\"p\">](</span><span class=\"sx\">https://snyk.io/test/npm/name/badge.svg</span><span class=\"p\">)</span>](https://snyk.io/test/npm/name)\n</code></pre>\n</div>\n\n<p>The badge will reflect the vulnerability state of the latest version of this package.\nTo show the vulnerability state of a specific package, you can specify the specific version in the URL.</p>\n\n<p>For example, to test version <code class=\"highlighter-rouge\">1.2.3</code> of package <code class=\"highlighter-rouge\">name</code>, use the URL <code class=\"highlighter-rouge\">https://snyk.io/test/npm/name/1.2.3/badge.svg</code>.</p>\n"
  },
  
  {
    "title" : "GitHub badge",
    "docs_badges" : "true",
    "url"     : "/docs/badges/github-badge",
    "slug"     : "github-badge",
    "content": "<p>Badges for GitHub repositories work the same as npm badges, with a slightly different URL.</p>\n\n<p>To show a badge for a given GitHub repository, copy the relevant snippet below and replace “user/name” with the GitHub username and repo you want to test.</p>\n\n<h3 id=\"html\">HTML:</h3>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"https://snyk.io/test/github/snyk/goof/badge.svg\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"Known Vulnerabilities\"</span> <span class=\"na\">data-canonical-src=</span><span class=\"s\">\"https://snyk.io/test/github/snyk/goof\"</span> <span class=\"na\">style=</span><span class=\"s\">\"max-width:100%;\"</span><span class=\"nt\">/&gt;</span>\n</code></pre>\n</div>\n\n<h3 id=\"markdown\">Markdown:</h3>\n\n<div class=\"language-md highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"nv\">![Known Vulnerabilities</span><span class=\"p\">](</span><span class=\"sx\">https://snyk.io/test/github/snyk/goof/badge.svg</span><span class=\"p\">)</span>](https://snyk.io/test/github/snyk/goof)\n</code></pre>\n</div>\n\n<p>The badge will reflect the vulnerability state of the latest commit on the <code class=\"highlighter-rouge\">master</code> branch.\nTo show the vulnerability state of a specific branch, release or tag, simply add its name after the repo name in the URL.</p>\n\n<p>For example, to show a badge for the <code class=\"highlighter-rouge\">4.x</code> branch of the <code class=\"highlighter-rouge\">express</code> repo, use the URL <code class=\"highlighter-rouge\">https://snyk.io/test/github/expressjs/express/4.x/badge.svg</code>.</p>\n"
  },
  
  {
    "title" : "Private packages and repos",
    "docs_badges" : "true",
    "url"     : "/docs/badges/private-packages-and-repos",
    "slug"     : "private-packages-and-repos",
    "content": "<p>Badges currently only work for public npm packages and GitHub repositories, and will fail if pointed at a private repository.</p>\n\n<p>To continuously watch for vulnerabilities in your GitHub repositories, both public and private, consider <a href=\"/docs/github/\">integrating them with Snyk</a>.</p>\n"
  },
  
  {
    "docs_bitbucket" : "true",
    "url"     : "/docs/bitbucket/",
    "slug"     : "",
    "content": "<p>By integrating Snyk into <a href=\"https://bitbucket.org/product/features/pipelines\">Bitbucket Pipelines</a>, you can continuously monitor your codebase for known vulnerabilities in your dependencies.</p>\n"
  },
  
  {
    "title" : "Creating a policy file",
    "docs_bitbucket" : "true",
    "url"     : "/docs/bitbucket/creating-a-policy-file",
    "slug"     : "creating-a-policy-file",
    "content": "<ol>\n  <li>Install the Snyk utility using <code class=\"highlighter-rouge\">npm install -g snyk</code>.</li>\n  <li>Run <code class=\"highlighter-rouge\">snyk wizard</code> in the directory of your project following the prompts which will also generate a <code class=\"highlighter-rouge\">.snyk</code> policy file. For more information about this, see <a href=\"/docs/using-snyk/#wizard\">our CLI documentation</a>.</li>\n  <li>When asked by <code class=\"highlighter-rouge\">snyk wizard</code>, select to include <code class=\"highlighter-rouge\">snyk test</code> as part of your <code class=\"highlighter-rouge\">npm test</code> command. If there are new vulnerabilities in the future, Bitbucket Pipelines will fail.</li>\n  <li>Ensure the <code class=\"highlighter-rouge\">.snyk</code> file you generated was added to your source control (<code class=\"highlighter-rouge\">git add .snyk</code>).</li>\n</ol>\n\n"
  },
  
  {
    "title" : "Configure Bitbucket Pipelines",
    "docs_bitbucket" : "true",
    "url"     : "/docs/bitbucket/configure-bitbucket-pipelines",
    "slug"     : "configure-bitbucket-pipelines",
    "content": "<p>After running the steps above to create a <code class=\"highlighter-rouge\">.snyk </code>policy file, you now need to create a <code class=\"highlighter-rouge\">bitbucket-pipelines.yml</code> file which will configure Bitbucket Pipelines.</p>\n\n<p>If you aren’t using Pipelines yet, go to Bitbucket, add the Bitbucket Pipelines add-on, and enable it for the repository in question.</p>\n\n<h3 id=\"creating-a-new-bitbucket-pipelinesyml-file\">Creating a new bitbucket-pipelines.yml file</h3>\n\n<p>Use the <code class=\"highlighter-rouge\">bitbucket-pipelines.yml</code> from <a href=\"https://bitbucket.org/snyk/snyk-pipelines/src/\">the snyk-pipelines repository</a>.</p>\n\n<p>This file has the configuration we recommend to stay secure:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">snyk protect</code> applies any patches you chose during <code class=\"highlighter-rouge\">snyk wizard</code>.</li>\n  <li><code class=\"highlighter-rouge\">snyk test</code> will automatically run as part of <code class=\"highlighter-rouge\">npm test</code> and will fail the pipeline if any known vulnerabilities are found in the dependencies.</li>\n  <li>Snyk alerts you when newly disclosed vulnerabilities affect your project’s dependencies. <code class=\"highlighter-rouge\">snyk monitor</code> makes sure we have an up-to-date list of your dependencies to do so accurately. You’ll also need to authenticate to Snyk, so we know where to update the dependencies.</li>\n</ul>\n\n<p>As part of setup, you need to configure your environment to include the <code class=\"highlighter-rouge\">SNYK_TOKEN</code> environment variable in the Bitbucket settings. You can find your API token in your <a href=\"https://snyk.io/account/\">account settings on snyk.io</a>.</p>\n\n<p><img src=\"http://res.cloudinary.com/snyk/image/upload/c_scale,w_500/v1475078005/Configure_env_var_on_BB.png\" alt=\"Configuring the environment variable\" />\n<em>Configuring the environment variable</em></p>\n\n<h3 id=\"adapting-an-existing-bitbucket-pipelinesyml-file\">Adapting an existing bitbucket-pipelines.yml file</h3>\n\n<p>If you want to adapt an existing <code class=\"highlighter-rouge\">bitbucket-pipelines.yml</code> file, we recommend to add Snyk like this:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"pi\">-</span> <span class=\"s\">npm install</span>\n<span class=\"c1\"># authenticate with snyk</span>\n<span class=\"pi\">-</span> <span class=\"s\">node node_modules/snyk/cli auth ${SNYK_TOKEN} -d</span>\n<span class=\"c1\"># run snyk protect to apply any patches</span>\n<span class=\"pi\">-</span> <span class=\"s\">node node_modules/snyk/cli protect</span>\n<span class=\"c1\"># snyk test will run as part of npm test and fail if it finds vulnerabilities</span>\n<span class=\"pi\">-</span> <span class=\"s\">npm test</span>\n<span class=\"c1\"># snyk monitor updates the dependencies Snyk will monitor for new vulnerabilities</span>\n<span class=\"pi\">-</span> <span class=\"s\">if [ $BITBUCKET_BRANCH == \"master\" ]; then node node_modules/snyk/cli monitor; fi;</span> \n</code></pre>\n</div>\n<p>You’ll need to configure your environment to include the <code class=\"highlighter-rouge\">SNYK_TOKEN</code> environment variable. You can find your API token in your <a href=\"https://snyk.io/account/\">account settings on snyk.io</a>.</p>\n"
  },
  
  {
    "title" : "Enable Pipelines",
    "docs_bitbucket" : "true",
    "url"     : "/docs/bitbucket/enable-pipelines",
    "slug"     : "enable-pipelines",
    "content": "<p>You should now enable Pipelines. Bitbucket Pipelines will fail if any known vulnerabilities are found in your dependencies.</p>\n\n<p><img src=\"http://res.cloudinary.com/snyk/image/upload/q_auto,f_auto,w_1344,c_scale/v1474020170/docs/bitbucket_pipelines.jpg\" alt=\"Bitbucket Pipelines\" /></p>\n"
  },
  
  {
    "title" : "Setup",
    "docs_slack-integration" : "true",
    "url"     : "/docs/slack-integration/setup",
    "slug"     : "setup",
    "content": "<p>Don’t like email? You can set up Slack to receive Snyk’s alerts about new vulnerabilities that affect your projects, and about new upgrades or patches that have become available.</p>\n\n<p>You’ll get two alerts in Slack:</p>\n\n<p>1: A newly disclosed vulnerability affects you</p>\n\n<p><img src=\"http://res.cloudinary.com/snyk/image/upload/q_auto,f_auto,w_auto/v1474298426/Slack-Vulnerability-Alert.png\" alt=\"Slack Vulnerability Alert\" /></p>\n\n<p>2: A new upgrade or patch is available for a vulnerability that you previously ignored or patched</p>\n\n<p><img src=\"http://res.cloudinary.com/snyk/image/upload/q_auto,f_auto,w_auto/v1474298547/Slack-Remediation-Alert.png\" alt=\"Slack Remediation Alert\" /></p>\n\n<p>To set it up, go to your ‘Manage organisation’ settings, and simply enter the Slack WebHook URL.</p>\n\n<p><img src=\"http://res.cloudinary.com/snyk/image/upload/q_auto,f_auto,w_auto/v1474297920/Slack-Integration-Settings.png\" alt=\"Slack Integration\" /></p>\n"
  },
  
  {
    "docs_broker" : "true",
    "url"     : "/docs/broker/",
    "slug"     : "",
    "content": "<p>Snyk can be used with private GitHub Enterprise installations via a <a href=\"https://github.com/Snyk/broker\">custom proxy</a>, referred to as the Snyk “broker”. A Snyk broker can also be used between Snyk and github.com itself, to reduce Snyk’s access to your GitHub repositories.</p>\n\n<p>These instructions will get you up and running with a Snyk broker, allowing your private GitHub Enterprise to connect to Snyk.io.</p>\n\n<h3 id=\"how-it-works\">How it works</h3>\n\n<p>The Snyk broker is made up of two web servers that proxy requests over a secure web socket connection. The broker “client” runs within your network, in a location with connectivity to your GitHub Enterprise. On start-up it establishes a secure web socket connection to a broker “server” running at https://broker.snyk.io. Requests from Snyk to your GitHub Enterprise and web-hook initiated requests from your GitHub Enterprise to Snyk are sent over this tunnel.</p>\n\n<p>The client has a white list of allowed requests (expressed as a JSON file), ensuring that only requests which are required for Snyk to function are proxied. All other requests are dropped. Requests are filtered on both request path, and JSON body.</p>\n"
  },
  
  {
    "title" : "Snyk set-up",
    "docs_broker" : "true",
    "url"     : "/docs/broker/snyk-set-up",
    "slug"     : "snyk-set-up",
    "content": "<p>In order to use Snyk with your GitHub Enterprise, Snyk will first need to enable broker support for one of your Snyk organisations.</p>\n\n<p>To request broker support, contact <a href=\"&#109;&#097;&#105;&#108;&#116;&#111;:&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#064;&#115;&#110;&#121;&#107;&#046;&#105;&#111;\">&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#064;&#115;&#110;&#121;&#107;&#046;&#105;&#111;</a> with the name of the organisation that you’d like to connect to your GitHub Enterprise.</p>\n\n<p>Each broker is identified by a unique token. Once broker support has been enabled for your organisation, you can access your unique broker token on the organisation’s settings page. This token is private, and must not be shared.</p>\n"
  },
  
  {
    "title" : "GitHub / GitHub Enterprise set-up",
    "docs_broker" : "true",
    "url"     : "/docs/broker/github-github-enterprise-set-up",
    "slug"     : "github-github-enterprise-set-up",
    "content": "<p>In order to interact with your GitHub Enterprise repositories, Snyk needs to use a GitHub Enterprise personal access token with “repo” and “admin:repo_hook” scopes.</p>\n\n<p>To create a GitHub Enterprise token:</p>\n\n<ol>\n  <li>log in to your GitHub Enterprise (or github.com, if that’s what you’re connecting via the broker)</li>\n  <li>navigate to “/settings/tokens” in your web browser. e.g. for github.com, go to <a href=\"https://github.com/settings/tokens\">https://github.com/settings/tokens</a></li>\n  <li>click on the “Generate new token” button</li>\n  <li>enter a description for the token, and select the “repo” and “admin:repo_hook” scope</li>\n  <li>click on the “Generate token” button</li>\n  <li>save the token so that you can configure your broker with it</li>\n</ol>\n\n<p>This GitHub token must be provided to the broker client, which then inserts it into requests as they are proxied from Snyk to your GitHub Enterprise.</p>\n\n<p><em>The GitHub token never leaves your network!</em></p>\n"
  },
  
  {
    "title" : "Broker client",
    "docs_broker" : "true",
    "url"     : "/docs/broker/broker-client",
    "slug"     : "broker-client",
    "content": "<p>The broker client is a web server which securely relays requests between Snyk’s servers and your GitHub Enterprise. It needs to run on a network which has both outbound internet access and access to your GitHub Enterprise.</p>\n\n<p>To set up and run a Snyk broker client:</p>\n\n<ol>\n  <li>\n    <p>Install snyk-broker</p>\n\n    <p><code class=\"highlighter-rouge\">$ npm install -g snyk-broker</code></p>\n  </li>\n  <li>\n    <p>Initialise the broker for use with Snyk</p>\n\n    <p><code class=\"highlighter-rouge\">$ broker init snyk</code></p>\n\n    <p>This will generate two files:\n  - “.env”        : the brokers configuration\n  - “accept.json” : the rules used to filter the requests being proxied to and from the Snyk servers</p>\n  </li>\n  <li>\n    <p>Edit the “.env” file, providing the following details:</p>\n\n    <table>\n      <thead>\n        <tr>\n          <th>Variable name</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>BROKER_TOKEN</td>\n          <td>Your unique broker token. This is displayed on the organisation settings page on <a href=\"https://snyk.io\">snyk.io</a>. <strong>This is a private token and must not be shared.</strong></td>\n        </tr>\n        <tr>\n          <td>GITHUB_TOKEN</td>\n          <td>A GitHub Enterprise (or GitHub) personal access token for the user that Snyk will use to access your repositories.</td>\n        </tr>\n        <tr>\n          <td>GITHUB</td>\n          <td>The host (and port if necessary) of your private GitHub server.</td>\n        </tr>\n        <tr>\n          <td>GITHUB_API</td>\n          <td>The url to the api of your private GitHub server.</td>\n        </tr>\n        <tr>\n          <td>GITHUB_RAW</td>\n          <td>The url to access raw contents of files in git repos on your private GitHub server</td>\n        </tr>\n        <tr>\n          <td>BROKER_CLIENT_URL</td>\n          <td>The url that your broker <em>client</em> is accessible at, which will be used for GitHub webhooks that notify Snyk of relevant changes to your repositories</td>\n        </tr>\n        <tr>\n          <td>CA_CERT</td>\n          <td>(optional) Path to the Certificate Authority root certificate that was used to sign your GitHub Enterprise’s TLS certificate. Only needed if your GitHub Enterprise uses a TLS certificate signed by a custom Certificate Authority</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <p>The .env file itself is optional, all of these details may be provided to the broker as environment variables.</p>\n\n    <p>Note: The .env file is generated with defaults appropriate for use with GitHub Enterprise. It also includes instructions for values to use with github.com.</p>\n  </li>\n  <li>\n    <p>Start the broker</p>\n\n    <p><code class=\"highlighter-rouge\">$ broker client</code></p>\n\n    <p>The broker can be started in debugging mode with:</p>\n\n    <p><code class=\"highlighter-rouge\">$ broker client --verbose</code></p>\n\n    <p>Note: your BROKER_TOKEN will be output on stdout when the broker is started with <code class=\"highlighter-rouge\">--verbose</code>.</p>\n  </li>\n</ol>\n\n<p>Alternatively, the broker can also be installed as part of a private npm package. See <a href=\"https://github.com/Snyk/broker-snyk-client-example\">https://github.com/Snyk/broker-snyk-client-example</a> for an example of this.</p>\n"
  },
  
  {
    "title" : "Connect Snyk to your brokered GitHub Enterprise / GitHub",
    "docs_broker" : "true",
    "url"     : "/docs/broker/connect-snyk-to-your-brokered-github-enterprise-github",
    "slug"     : "connect-snyk-to-your-brokered-github-enterprise-github",
    "content": "<p>Once your broker client is up and running, you can connect you Snyk account to your GitHub Enterprise.</p>\n\n<ol>\n  <li><strong>Important:</strong> log out of <a href=\"https://snyk.io\">https://snyk.io</a></li>\n  <li>log back in to <a href=\"https://snyk.io\">https://snyk.io</a></li>\n  <li>select the organisation that you’re using with your broker</li>\n  <li>navigate to the “Projects” page</li>\n  <li>click on “Test my GitHub repositories”</li>\n  <li>you will be prompted for GitHub permissions, which must be provided. This is required while the broker is in early-access, but this access <em>is not used</em></li>\n  <li>you should see repositories from your brokered GitHub Enterprise / GitHub</li>\n</ol>\n\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n\n<p>If you do not see any repositories, you may need to click the “Re-sync” button.</p>\n\n<p>If you see your GitHub.com repositories then log out, then log back in and try again.</p>\n\n<p>If you have access to both brokered and non-brokered Snyk organisations then you may need to “Re-sync” the first time you test repositories for each organisation.</p>\n"
  },
  
  {
    "title" : "About known vulnerabilities",
    "docs_faqs" : "true",
    "url"     : "/docs/faqs/about-known-vulnerabilities",
    "slug"     : "about-known-vulnerabilities",
    "content": "<h3 id=\"what-are-known-vulnerabilities\">What are known vulnerabilities?</h3>\n\n<p>Known vulnerabilities are publicly disclosed security bugs, typically found and logged by users, or reported by security researchers. Being public makes these issues the easiest ones for attackers to find and exploit <sup><a href=\"http://www.theregister.co.uk/2015/02/23/hp_hack_vulnerable_threat_study/\">[1]</a></sup>, and therefore very important to address.</p>\n\n<h3 id=\"what-are-direct-and-deep-dependencies\">What are direct and deep dependencies?</h3>\n\n<p>Known vulnerabilities can be introduced either via a direct or via a deep dependency.</p>\n\n<ul>\n  <li>A direct dependency is a is a package that you’ve included in your own project via package.json.</li>\n  <li>A deep dependency, also referred to as an indirect, chained, or transitive dependency, is a package that you are not using directly, but one that is used by one of your direct dependencies.</li>\n</ul>\n\n<p>In other words, if your application is using module A, and module A is using module B, then your application is indirectly depending on module B. And if module B is vulnerable, you are vulnerable.</p>\n\n<h3 id=\"how-do-you-determine-the-severity-of-a-vulnerability\">How do you determine the severity of a vulnerability?</h3>\n\n<p>The severity of a vulnerability is manually assigned by our security research team. It’s based primarily on the impact of the vulnerability, and by how easy it is to exploit it.</p>\n\n<p>For instance, the <a href=\"https://snyk.io/vuln/npm:bassmaster:20140927&quot;\">bassmaster vulnerability</a> allows an attacker to execute code on your server (a “remote command execution” vulnerability), and can easily be exploited with a well crafted request, making it a high severity issue. The <a href=\"https://snyk.io/vuln/npm:dns-sync:20141111\">dns-sync vulnerability</a> also allows remote command execution, but to exploit it an attacker needs to control the name of the host you resolve - a less likely scenario. Therefore, it was deemed medium severity.</p>\n\n<h3 id=\"why-should-i-monitor-my-projects-for-known-vulnerabilities\">Why should I monitor my projects for known vulnerabilities?</h3>\n\n<p>New vulnerabilities aren’t actually new security holes - they’re newly disclosed, but impact old, existing code. This means you could have new known vulnerabilities without making any code changes. <a href=\"https://snyk.io/docs/using-snyk/#monitor\">Monitoring your projects</a> means you’ll be the first to know if you are affect by a newly disclosed vulnerability, and you can assess and act upon the vulnerability risk quickly.</p>\n"
  },
  {
    "title" : "Fixing vulnerabilities",
    "docs_faqs" : "true",
    "url"     : "/docs/faqs/fixing-vulnerabilities",
    "slug"     : "fixing-vulnerabilities",
    "content": "<h3 id=\"what-can-i-do-if-im-vulnerable\">What can I do if I’m vulnerable?</h3>\n\n<p>If possible, the cleanest and best way to address a vulnerability is to upgrade to a vulnerability-free version of the module you’re using. In most cases, disclosed vulnerabilities are fixed shortly after they’re discovered, and all you need to do is upgrade to the relevant version.</p>\n\n<p>If the vulnerability is introduced by a deep (i.e. indirect) dependency, you can’t upgrade it away for technical reasons, and for fear of breaking functionality. Snyk’s <a href=\"https://snyk.io/docs/using-snyk/#wizard\"><code class=\"highlighter-rouge\">wizard</code></a> <a href=\"https://snyk.io/docs/using-snyk/#wizard\"><code>wizard</code></a> will guide you to the best direct dependency upgrade that will trigger the necessary deep dependency upgrade.</p>\n\n<p>If you can’t upgrade, because there is no sufficient direct upgrade available, or because the upgrade includes breaking changes you can’t take on right now, your next best option is to apply a patch. A patch changes the locally installed package file to fix the vulnerability.\nSnyk’s <a href=\"https://snyk.io/docs/using-snyk/#wizard\"><code>wizard</code></a> will detect the best remediation option for each vulnerability for you; you can also find remediation guidance on the report page (for your monitored project, or for a public package you’ve tested) on the Snyk website.</p>\n\n<h3 id=\"what-does-patching-mean\">What does patching mean?</h3>\n\n<p>A patch will make the minimum changes required to your locally installed package files, to fix the vulnerability. Patching is a good option to fix vulnerabilities when you can’t upgrade.\nIf you’re monitoring your project, we will notify you once an upgrade becomes available.</p>\n\n<h3 id=\"can-patching-break-my-code\">Can patching break my code?</h3>\n\n<p>We test all patches we release rigorously, and keep the changes a patch makes to your code to a minimum. We haven’t seen a single case where our patches broke intended functionality. However, we can’t guarantee that a patch won’t break something. If you are unsure, it’s best to take a look at the patch before applying it.</p>\n\n<h3 id=\"when-i-can-choose-how-should-i-decide-whether-to-upgrade-or-patch\">When I can choose, how should I decide whether to upgrade or patch?</h3>\n\n<p>An upgrade is usually the best way to fix a vulnerability. If both an upgrade and a patch are available, Snyk will usually recommend the upgrade. However, Snyk’s <a href=\"https://snyk.io/docs/using-snyk/#wizard\"><code>wizard</code></a> lets you choose to patch, even if an upgrade is available. You might want to patch if an upgrade would be a potentially breaking change (we highlight if this is the case), or if you have other reasons to not upgrade for now.\nIf you’re unsure and would like to assess the impact before applying a fix, you can get details for each vulnerability on our website.</p>\n\n<h3 id=\"what-if-there-is-no-upgrade-or-patch-available\">What if there is no upgrade or patch available?</h3>\n\n<p>Assess the issue, and weigh up risk against effort. If the risk is high, you could remove the dependency. Both <a href=\"/docs/using-snyk/\">Snyk CLI</a> and the <a href=\"/docs/github/\">GitHub integration</a> allow you to ignore the vulnerability for 30 days.</p>\n\n<h3 id=\"how-can-i-ignore-a-vulnerability\">How can I ignore a vulnerability?</h3>\n\n<p>We normally recommend that you don’t ignore vulnerabilities unless there are no fixes available. However if you don’t want to fix a vulnerability, and would like to ignore it, there are a few ways you can do this.</p>\n\n<p>For npm projects you can use <code class=\"highlighter-rouge\">snyk wizard</code> to ignore the vulnerability for 30 days, adding a reason why. Note that for npm projects, Snyk does not test <code class=\"highlighter-rouge\">devDependencies</code> by default.</p>\n\n<p>For all projects (including Ruby projects), you can ignore the vulnerability by creating a <code class=\"highlighter-rouge\">.snyk</code> YAML file in the root of your project with the following format:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>version: v1.5.0\nignore:\n  '{SNYK ID}':\n    - '* &gt; {AFFECTED MODULE}':\n        reason: '{Optional, the reason why you are ignoring the vulnerability}'\n        expires: '{valid ISO 8601 date}'\n</code></pre>\n</div>\n\n<p>For example, if you wanted to ignore the vulnerability with SNYK ID <a href=\"https://snyk.io/vuln/SNYK-RUBY-FASTREADER-20085\">SNYK-RUBY-FASTREADER-20085</a> in <code class=\"highlighter-rouge\">fastreader</code>, with the reason “No remediation available” until 01 Jan 2017, you would write:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>version: v1.5.0\nignore:\n  'SNYK-RUBY-FASTREADER-20085':\n    - '* &gt; fastreader':\n        reason: 'No remediation available'\n        expires: '2017-01-01T00:00:00.000Z'\n</code></pre>\n</div>\n"
  },
  {
    "title" : "Using Snyk",
    "docs_faqs" : "true",
    "url"     : "/docs/faqs/using-snyk",
    "slug"     : "using-snyk",
    "content": "<h3 id=\"why-should-i-add-snyk-test-to-my-continuous-integration-ci\">Why should I add Snyk Test to my Continuous Integration (CI)?</h3>\n\n<p>Integrating Snyk will prevent code changes from introducing new vulnerable packages. <a href=\"https://snyk.io/docs/using-snyk/#integrating-snyk-into-your-dev-workflow\">Find out how to integrate Snyk into your workflow</a>.</p>\n\n<h3 id=\"how-can-i-use-snyk-behind-a-proxy\">How can I use Snyk behind a proxy?</h3>\n\n<p>To run Snyk from behind a proxy you will need to use an enviroment value to point to your proxy. The following environment variables are respected by Snyk:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">HTTP_PROXY</code> / <code class=\"highlighter-rouge\">http_proxy</code></li>\n  <li><code class=\"highlighter-rouge\">HTTPS_PROXY</code> / <code class=\"highlighter-rouge\">https_proxy</code></li>\n  <li><code class=\"highlighter-rouge\">NO_PROXY</code> / <code class=\"highlighter-rouge\">no_proxy</code></li>\n</ul>\n\n<p>For example, to configure this as a one time value, you can run:</p>\n\n<p><code class=\"highlighter-rouge\">$ https_proxy=https://my.corporate.proxy:8080/ snyk test</code></p>\n\n<h3 id=\"why-does-snyk-install-itself-into-my-production-dependencies\">Why does Snyk install itself into my production dependencies?</h3>\n\n<p>After running <code class=\"highlighter-rouge\">snyk wizard</code>, if you choose to protect upon installation of your package, Snyk will need to be bundled as a production dependency.</p>\n\n<p>However, if you select to <em>only</em> test your page (and not protect), Snyk will install itself as a development dependency.</p>\n\n<h3 id=\"how-can-i-test-a-github-repository-from-the-command-line-interface-tool-cli\">How can I test a Github repository from the command-line interface tool (CLI)?</h3>\n\n<p>Currently, we support testing public Github repositories only.\nTo test a public Github repository, run snyk test and include the Github URL to the repo.</p>\n\n<div class=\"language-zsh highlighter-rouge\"><pre class=\"highlight\"><code>snyk <span class=\"nb\">test </span>https://github.com/snyk/snyk\n</code></pre>\n</div>\n\n<p>The following git URL formats are supported:</p>\n\n<ul>\n  <li>git://github.com/user/project.git#commit-ish</li>\n  <li>https://github.com/user/project#commit-ish</li>\n  <li>user/project#commit-ish</li>\n</ul>\n\n<p>This also works for Bitbucket and GitLab.\nYou can also test a public npm package or Github project via the <a href=\"https://snyk.io/test/\">Test page on snyk.io</a>.</p>\n\n<h3 id=\"how-can-i-delete-my-data\">How can I delete my data?</h3>\n\n<p>You can delete a project on the project page on the Snyk website. This will delete the project, and all snapshots that are related to it, and you won’t be able to access it. Please note that the data remains in our database, so if you would like to restore it, let us know. If you would like us to delete your project data permanently from the database, <a href=\"mailto:support@snyk.io\">email us</a> and we’ll sort it out.</p>\n\n<h3 id=\"how-can-i-delete-my-account\">How can I delete my account?</h3>\n\n<p>Until we support deleting your account via the Snyk website, this is a manual process. <a href=\"mailto:support@snyk.io\">Email us</a>, and we will remove your account and all your data from our database.</p>\n\n<h3 id=\"what-analytics-do-you-track-how-can-i-opt-out\">What analytics do you track? How can I opt out?</h3>\n\n<p>We are using a range of web analytics tools to understand and analyse user behaviour on snyk.io. If you’d like to block tracking, use one of the many browser tools available.</p>\n\n<p>Our CLI tool reports an event for each command to our analytics, including the version of the CLI tool, the User ID, and the package name. This allows us to better understand how the CLI client is used, and informs our product development decisions.</p>\n\n<p>If you would like to opt out, you can do so by running the following command:</p>\n\n<div class=\"language-zsh highlighter-rouge\"><pre class=\"highlight\"><code>snyk config <span class=\"nb\">set </span>disable-analytics<span class=\"o\">=</span>1\n</code></pre>\n</div>\n\n<p>To remove the flag, run:</p>\n\n<div class=\"language-zsh highlighter-rouge\"><pre class=\"highlight\"><code>snyk config <span class=\"nb\">unset </span>disable-analytics\n</code></pre>\n</div>\n\n<p>If you have any questions or problems, please <a href=\"mailto:support@snyk.io\">email us</a>.</p>\n"
  }
]
